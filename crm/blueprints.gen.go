// Code generated by go generate; DO NOT EDIT.
// This Zoho CRM endpoint API was generated @ 2019-10-08 22:29:14.0896223 -0600 CST m=+0.007138301
package crm

import (
	"fmt"

	zoho "github.com/schmorrison/Zoho"
)

// GetBlueprint retrieves a blueprint record specified by the ID parameter from the module specified
// https://www.zoho.com/crm/help/api/v2/#blueprint-api
func (c *API) GetBlueprint(module crmModule, id string) (data BlueprintResponse, err error) {
	endpoint := zoho.Endpoint{
		Name:         "blueprints",
		URL:          fmt.Sprintf("https://www.zohoapis.%s/crm/v2/%s/%s/actions/blueprint", c.ZohoTLD, module, id),
		Method:       zoho.HTTPGet,
		ResponseData: &BlueprintResponse{},
	}

	err = c.Zoho.HTTPRequest(&endpoint)
	if err != nil {
		return BlueprintResponse{}, fmt.Errorf("Failed to retrieve blueprints: %s", err)
	}

	if v, ok := endpoint.ResponseData.(*BlueprintResponse); ok {
		return *v, nil
	}

	return BlueprintResponse{}, fmt.Errorf("Data returned was not 'BlueprintResponse'")
}

type BlueprintResponse struct {
	Blueprint struct {
		ProcessInfo struct {
			APIName      string `json:"api_name,omitempty"`
			ColumnName   string `json:"column_name,omitempty"`
			Continuous   bool   `json:"continuous,omitempty"`
			FieldID      string `json:"field_id,omitempty"`
			FieldLabel   string `json:"field_label,omitempty"`
			FieldName    string `json:"field_name,omitempty"`
			FieldValue   string `json:"field_value,omitempty"`
			ID           string `json:"id,omitempty"`
			IsContinuous bool   `json:"is_continuous,omitempty"`
			Name         string `json:"name,omitempty"`
		} `json:"process_info,omitempty"`
		Transitions []struct {
			CriteriaMatched bool        `json:"criteria_matched,omitempty"`
			CriteriaMessage interface{} `json:"criteria_message,omitempty"`
			Data            struct {
				AccountName   string      `json:"Account_Name,omitempty"`
				Attachments   interface{} `json:"Attachments,omitempty"`
				ParentAccount interface{} `json:"Parent_Account,omitempty"`
				Phone         string      `json:"Phone,omitempty"`
			} `json:"data,omitempty"`
			Fields []struct {
				Type          string      `json:"_type,omitempty"`
				APIName       string      `json:"api_name,omitempty"`
				AutoNumber    struct{}    `json:"auto_number,omitempty"`
				ColumnName    string      `json:"column_name,omitempty"`
				Content       string      `json:"content,omitempty"`
				CreatedSource string      `json:"created_source,omitempty"`
				Crypt         interface{} `json:"crypt,omitempty"`
				Currency      struct{}    `json:"currency,omitempty"`
				CustomField   bool        `json:"custom_field,omitempty"`
				DataType      string      `json:"data_type,omitempty"`
				DecimalPlace  interface{} `json:"decimal_place,omitempty"`
				DisplayLabel  string      `json:"display_label,omitempty"`
				FieldLabel    string      `json:"field_label,omitempty"`
				Formula       struct{}    `json:"formula,omitempty"`
				ID            string      `json:"id,omitempty"`
				JSONType      string      `json:"json_type,omitempty"`
				Layouts       struct {
					ID   string `json:"id,omitempty"`
					Name string `json:"name,omitempty"`
				} `json:"layouts,omitempty"`
				Length float64 `json:"length,omitempty"`
				Lookup struct {
					APIName      string `json:"api_name,omitempty"`
					DisplayLabel string `json:"display_label,omitempty"`
					ID           string `json:"id,omitempty"`
					Module       string `json:"module,omitempty"`
				} `json:"lookup,omitempty"`
				Mandatory          bool          `json:"mandatory,omitempty"`
				Multiselectlookup  struct{}      `json:"multiselectlookup,omitempty"`
				PersonalityName    string        `json:"personality_name,omitempty"`
				PickListValues     []interface{} `json:"pick_list_values,omitempty"`
				ReadOnly           bool          `json:"read_only,omitempty"`
				Tooltip            interface{}   `json:"tooltip,omitempty"`
				TransitionSequence float64       `json:"transition_sequence,omitempty"`
				Unique             struct{}      `json:"unique,omitempty"`
				ViewType           struct {
					Create      bool `json:"create,omitempty"`
					Edit        bool `json:"edit,omitempty"`
					QuickCreate bool `json:"quick_create,omitempty"`
					View        bool `json:"view,omitempty"`
				} `json:"view_type,omitempty"`
				Visible bool `json:"visible,omitempty"`
				Webhook bool `json:"webhook,omitempty"`
			} `json:"fields,omitempty"`
			ID                 string        `json:"id,omitempty"`
			Name               string        `json:"name,omitempty"`
			NextFieldValue     string        `json:"next_field_value,omitempty"`
			NextTransitions    []interface{} `json:"next_transitions,omitempty"`
			PercentPartialSave float64       `json:"percent_partial_save,omitempty"`
		} `json:"transitions,omitempty"`
	} `json:"blueprint,omitempty"`
}

// UpdateBlueprint updates the blueprint specified by ID in the specified module
// https://www.zoho.com/crm/help/api/v2/#update-blueprint
func (c *API) UpdateBlueprint(request UpdateBlueprintData, module crmModule, ID string) (data UpdateBlueprintResponse, err error) {
	endpoint := zoho.Endpoint{
		Name:         "blueprints",
		URL:          fmt.Sprintf("https://www.zohoapis.%s/crm/v2/%s/%s/actions/blueprint", c.ZohoTLD, module, ID),
		Method:       zoho.HTTPPost,
		ResponseData: &UpdateBlueprintResponse{},
		RequestBody:  request,
	}

	err = c.Zoho.HTTPRequest(&endpoint)
	if err != nil {
		return UpdateBlueprintResponse{}, fmt.Errorf("Failed to retrieve blueprints: %s", err)
	}

	if v, ok := endpoint.ResponseData.(*UpdateBlueprintResponse); ok {
		return *v, nil
	}

	return UpdateBlueprintResponse{}, fmt.Errorf("Data returned was not 'UpdateBlueprintResponse'")
}

type UpdateBlueprintData struct {
	Blueprint []struct {
		Data struct {
			Attachments struct {
				FileID []string `json:"$file_id,omitempty"`
			} `json:"Attachments,omitempty"`
			Notes string  `json:"Notes,omitempty"`
			Phone float64 `json:"Phone,omitempty"`
			Tasks struct {
				Subject string `json:"Subject,omitempty"`
			} `json:"Tasks,omitempty"`
		} `json:"data,omitempty"`
		TransitionID string `json:"transition_id,omitempty"`
	} `json:"blueprint,omitempty"`
}

type UpdateBlueprintResponse struct {
	Code    string   `json:"code,omitempty"`
	Details struct{} `json:"details,omitempty"`
	Message string   `json:"message,omitempty"`
	Status  string   `json:"status,omitempty"`
}
